/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/3SgxD942qJV
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useChat } from 'ai/react';
import { useEffect, useState, useRef } from "react"
import { Label } from "@/components/ui/label"
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select"
import { Button } from "@/components/ui/button"
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs"
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from "@/components/ui/card"
import { kv } from '@/lib/kv';

interface ShareIconProps extends React.SVGProps<SVGSVGElement> {}

type JokeType = 'witty' | 'sarcastic' | 'silly' | 'dark' | 'goofy';

export function JokeComponent() {
  const { messages, isLoading, append } = useChat();
  const [jokeType, setJokeType] = useState<JokeType>("witty")
  const [jokes, setJokes] = useState<Record<JokeType, Array<{ setup: string; punchline: string }>>>({
    witty: [],
    sarcastic: [],
    silly: [],
    dark: [],
    goofy: []
  });

    const activeTabRef = useRef<JokeType>("witty")

    useEffect(() => {
      if (messages.length > 0 && !isLoading) {
        const lastMessage = messages[messages.length - 1];
        if (lastMessage.role === 'assistant') {
          console.log('Last message:', lastMessage.content);
          if (lastMessage.content) {
            try {
              const cleanedContent = lastMessage.content.replace(/```json|```/g, '').trim();
              console.log('cleanedContent:', cleanedContent);
              const jokeContent = JSON.parse(cleanedContent);
              setJokes(prevJokes => ({
                ...prevJokes,
                [activeTabRef.current]: [...prevJokes[activeTabRef.current], jokeContent]
              }));
            } catch (error) {
              console.error('Failed to parse joke:', error);
            }
          } else {
            console.warn('Received empty message content');
          }
        }
      }
    }, [messages, isLoading]);
    const generateNewJoke = async () => {
    console.log('generateNewJoke : Sending request for', activeTabRef.current, 'joke');
    append({
      role: "user", 
      content: 'Generate a ' + activeTabRef.current + ' joke. ',
    })
  }

  return (
    <div className="bg-background text-foreground min-h-screen flex flex-col items-center justify-center px-4 py-8">
      <div className="max-w-2xl w-full">
        <div className="mb-8 text-center">
          <h1 className="text-3xl font-bold">Joke Generator</h1>
          <p className="text-muted-foreground">Automatically generated jokes for your entertainment.</p>
        </div>
        <div className="grid gap-4">
          <div className="flex justify-between items-center">
            <Button onClick={generateNewJoke}>Generate New Joke</Button>
          </div>
          <Tabs defaultValue={jokeType} 
                className="w-full"
                onValueChange={(value) => {
                  setJokeType(value as JokeType);
                  activeTabRef.current = value as JokeType;
                }}
          >
            <TabsList className="grid grid-cols-5 w-full">
              <TabsTrigger value="witty">Witty</TabsTrigger>
              <TabsTrigger value="sarcastic">Sarcastic</TabsTrigger>
              <TabsTrigger value="silly">Silly</TabsTrigger>
              <TabsTrigger value="dark">Dark</TabsTrigger>
              <TabsTrigger value="goofy">Goofy</TabsTrigger>
            </TabsList>
            <TabsContent value={jokeType}>
              <div className="grid gap-4">
                {jokes[jokeType].map((joke, index) => (
                  <Card key={index}>
                    <CardHeader>
                      <CardTitle>{joke.setup}</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <p>{joke.punchline}</p>
                    </CardContent>
                    <CardFooter className="flex justify-end">
                      <Button variant="ghost" size="icon" onClick={() => {}}>
                        <ShareIcon className="h-4 w-4" />
                        <span className="sr-only">Share</span>
                      </Button>
                    </CardFooter>
                  </Card>
                ))}
              </div>
          </TabsContent>
          </Tabs>
        </div>
      </div>
    </div>
  )
}


function ShareIcon(props: ShareIconProps) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8" />
      <polyline points="16 6 12 2 8 6" />
      <line x1="12" x2="12" y1="2" y2="15" />
    </svg>
  )
}

