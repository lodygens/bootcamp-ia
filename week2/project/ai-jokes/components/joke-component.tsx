/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/3SgxD942qJV
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useRef } from "react"
import { Label } from "@/components/ui/label"
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select"
import { Button } from "@/components/ui/button"
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs"
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from "@/components/ui/card"

interface ShareIconProps extends React.SVGProps<SVGSVGElement> {}

export function JokeComponent() {
  const [jokeType, setJokeType] = useState("witty")
  const [joke, setJoke] = useState({ setup: "", punchline: "" })
  const activeTabRef = useRef(jokeType)

  const generateNewJoke = async () => {
    try {
      console.log('Sending request for', activeTabRef.current, 'joke');
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages: [
            { 
              role: "system", 
              content: "You are a comedian AI assistant." 
            },
            { 
              role: "user", 
              content: `Generate a ${activeTabRef.current} joke. Remember to respond only with a JSON object containing 'setup' and 'punchline' keys.`
            }
          ]
        }),
      });

      console.log('Response status:', response.status);

      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      const data = await response.json();
      console.log('Raw API response:', data);
      let jokeContent;
      if (data.choices && data.choices[0] && data.choices[0].message) {
        const aiResponse = data.choices[0].message.content;
        console.log('AI response content:', aiResponse);
  
        try {
          jokeContent = JSON.parse(aiResponse);
        } catch (parseError) {
          console.error('Failed to parse AI response as JSON:', parseError);
          // Tentative de nettoyage et de parsing manuel
          const cleanedResponse = aiResponse.replace(/^[^{]*/, '').replace(/[^}]*$/, '');
          try {
            jokeContent = JSON.parse(cleanedResponse);
          } catch (secondParseError) {
            console.error('Failed to parse cleaned AI response:', secondParseError);
            jokeContent = { setup: "Parsing Error", punchline: aiResponse };
          }
        }
      } else {
        jokeContent = { setup: "Error", punchline: "Unexpected API response format" };
      }
  
      console.log('Final joke content:', jokeContent);
      setJoke(jokeContent);
    } catch (error) {
      console.error('Failed to generate joke:', error);
      setJoke({ setup: "Error", punchline: "Failed to generate joke. Please try again." });
    }
    };

  return (
    <div className="bg-background text-foreground min-h-screen flex flex-col items-center justify-center px-4 py-8">
      <div className="max-w-2xl w-full">
        <div className="mb-8 text-center">
          <h1 className="text-3xl font-bold">Joke Generator</h1>
          <p className="text-muted-foreground">Automatically generated jokes for your entertainment.</p>
        </div>
        <div className="grid gap-4">
          <div className="flex justify-between items-center">
            <Button onClick={generateNewJoke}>Generate New Joke</Button>
          </div>
          <Tabs defaultValue={jokeType} 
                className="w-full"
                onValueChange={(value) => {
                  setJokeType(value);
                  activeTabRef.current = value;
                }}
          >
            <TabsList className="grid grid-cols-5 w-full">
              <TabsTrigger value="witty">Witty</TabsTrigger>
              <TabsTrigger value="sarcastic">Sarcastic</TabsTrigger>
              <TabsTrigger value="silly">Silly</TabsTrigger>
              <TabsTrigger value="dark">Dark</TabsTrigger>
              <TabsTrigger value="goofy">Goofy</TabsTrigger>
            </TabsList>
            <TabsContent value="witty">
              <div className="grid gap-4">
                <Card>
                  <CardHeader>
                    <CardTitle>Why don't scientists trust atoms?</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p>Because they make up everything!</p>
                  </CardContent>
                  <CardFooter className="flex justify-end">
                    <Button variant="ghost" size="icon" onClick={() => {}}>
                      <ShareIcon className="h-4 w-4" />
                      <span className="sr-only">Share</span>
                    </Button>
                  </CardFooter>
                </Card>
              </div>
            </TabsContent>
            <TabsContent value="sarcastic">
              <div className="grid gap-4" />
            </TabsContent>
            <TabsContent value="silly">
              <div className="grid gap-4">
                <Card>
                  <CardHeader>
                    <CardTitle>Why can't a bicycle stand up by itself?</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p>It's two-tired!</p>
                  </CardContent>
                  <CardFooter className="flex justify-end">
                    <Button variant="ghost" size="icon" onClick={() => {}}>
                      <ShareIcon className="h-4 w-4" />
                      <span className="sr-only">Share</span>
                    </Button>
                  </CardFooter>
                </Card>
              </div>
            </TabsContent>
            <TabsContent value="dark">
              <div className="grid gap-4" />
            </TabsContent>
            <TabsContent value="goofy">
              <div className="grid gap-4">
                <Card>
                  <CardHeader>
                    <CardTitle>Why did the tomato turn red?</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p>Because it saw the salad dressing!</p>
                  </CardContent>
                  <CardFooter className="flex justify-end">
                    <Button variant="ghost" size="icon" onClick={() => {}}>
                      <ShareIcon className="h-4 w-4" />
                      <span className="sr-only">Share</span>
                    </Button>
                  </CardFooter>
                </Card>
              </div>
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </div>
  )
}

function generateJoke() {

}

function ShareIcon(props: ShareIconProps) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8" />
      <polyline points="16 6 12 2 8 6" />
      <line x1="12" x2="12" y1="2" y2="15" />
    </svg>
  )
}
